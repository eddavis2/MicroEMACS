-----------------------------------------------------------------------
My changes vs. original:
_____________________________ ansi.c ___________________________________________

--so it would compile on Windows

Changed line 104
  >        ttopen();
To
  >#if !WIN32
  >        ttopen();
  >#endif
_____________________________ basic.c __________________________________________

--this was a bug fix I found in a later version

Changed line 126
  >        curwp->w_doto  = getgoal(elp);
To
  >        curwp->w_doto  = getgoal(dlp);
_____________________________ buffer.c _________________________________________

--clashes with system itoa(int value, char *str, int base)

Changed line 193
  >                itoa(b, 6, nbytes);             /* 6 digit buffer size. */
To
  >                me_itoa(b, 6, nbytes);          /* 6 digit buffer size. */

Changed line 218
  >itoa(buf, width, num)
To
  >me_itoa(buf, width, num)
_____________________________ ed.h _____________________________________________

--added includes, and LINUX and WIN32 defines

Inserted before line 1
  >#include <stdio.h>
  >#include <stdlib.h>
  >#include <string.h>
  >

Changed lines 7-8
  >
  >#define AMIGA   1                       /* AmigaDOS, Lattice            */
To
  >#if defined(__CYGWIN__) || defined(__linux__)
  >    #define ANSI    1
  >    #define LINUX   1
  >    #define WIN32   0
  >#elif defined(_WIN32) || defined(_WIN64)
  >    #define ANSI    0
  >    #define LINUX   0
  >    #define WIN32   1
  >#else
  >    error "unknown system"
  >#endif
  >
  >#define AMIGA   0                       /* AmigaDOS, Lattice            */

Deleted line 19
  >#define ANSI    1
_____________________________ file.c ___________________________________________

--Add proper environment

Changed line 215
  >#if     MSDOS
To
  >#if     MSDOS || WIN32

Changed line 219
  >#if     V7
To
  >#if     V7 || LINUX
_____________________________ main.c ___________________________________________

--Since we're using actual screen size, need to call display init first

Changed lines 268-269
  >        edinit(bname);                          /* Buffers, windows.    */
  >        vtinit();                               /* Displays.            */
To
  >        vtinit();                               /* Displays.            */
  >        edinit(bname);                          /* Buffers, windows.    */
_____________________________ spawn.c __________________________________________

--Add code for newer systems

Changed line 52
  >#if     V7
To
  >#if     V7 || LINUX

Changed line 73
  >#if     V7
To
  >#if     V7 || LINUX

Inserted after line 85
  >#if WIN32
  >        movecursor(term.t_nrow, 0);             /* Seek to last line.   */
  >        term.t_flush();
  >        term.t_close();                              /* stty to old settings */
  >        system(getenv("COMSPEC"));
  >        sgarbf = TRUE;
  >        term.t_open();
  >        return(TRUE);
  >#endif

Changed line 127
  >#if     MSDOS
To
  >#if     MSDOS || WIN32

Inserted after line 129
  >#if     WIN32
  >        movecursor(term.t_nrow, 0);             /* Seek to last line.   */
  >        term.t_flush();
  >        term.t_close();                              /* stty to old settings */
  >#endif

Inserted after line 132
  >#if     WIN32
  >        term.t_open();
  >#endif

Changed line 136
  >#if     V7
To
  >#if     V7 || LINUX
_____________________________ tcap.c ___________________________________________

--To make the compiler happy

Changed line 125
  >#endif TERMCAP
To
  >#endif /* TERMCAP */
_____________________________ termio.c _________________________________________

--adding LINUX support

Inserted after line 8
  >#if !WIN32
  >

Inserted after line 55
  >#if LINUX
  >#undef CTRL
  >#include <termios.h>
  >#include <unistd.h>
  >#include <signal.h>
  >#include <stdio.h>              /* puts(3), setbuffer(3), ... */
  >#include <stdlib.h>
  >#include <sys/ioctl.h>          /* to get at the typeahead */
  >
  >#define TBUFSIZ 128
  >char tobuf[TBUFSIZ];            /* terminal output buffer */
  >struct termios ostate, nstate;
  >#endif
  >

Inserted after line 116
  >#if     LINUX
  >  struct winsize w;
  >
  >  /* save terminal flags */
  >  if ((tcgetattr(0, &ostate) < 0) || (tcgetattr(0, &nstate) < 0)) {
  >      puts ("Can't read terminal capabilites\n");
  >      exit (1);
  >  }
  >  cfmakeraw(&nstate);           /* set raw mode */
  >  nstate.c_cc[VMIN] = 1;
  >  nstate.c_cc[VTIME] = 0;       /* block indefinitely for a single char */
  >  if (tcsetattr(0, TCSADRAIN, &nstate) < 0) {
  >      puts ("Can't set terminal mode\n");
  >      exit (1);
  >  }
  >  /* provide a smaller terminal output buffer so that the type ahead
  >   * detection works better (more often) */
  >  setbuffer (stdout, &tobuf[0], TBUFSIZ);
  >  signal (SIGTSTP, SIG_DFL);
  >
  >  if (ioctl(0, TIOCGWINSZ, &w) >= 0) {
  >      term.t_ncol = w.ws_col;
  >      term.t_nrow = w.ws_row - 1;
  >  }
  >#endif

Inserted after line 148
  >#if     LINUX
  >  ttflush ();
  >  if (tcsetattr(0, TCSADRAIN, &ostate) < 0) {
  >      puts ("Can't restore terminal flags");
  >      exit (1);
  >  }
  >#endif

Changed line 183
  >#if     V7
To
  >#if     V7 || LINUX

Changed line 214
  >#if     V7
To
  >#if     LINUX
  >        tcdrain (0);
  >#endif
  >#if     V7 || LINUX

Changed line 281
  >#if     V7
To
  >#if     V7 || LINUX

Inserted after line 284
  >#endif /* !WIN32 */
_____________________________ vt52.c __________________________________________

--Only call this if an actual VT52

Changed line 96
  >        ttopen();
To
  >#if VT52
  >        ttopen();
  >#endif
_____________________________ word.c ___________________________________________

-- When compiling 64-bit, I got a compiler error here.  I _think_ this is the
-- correct fix, but I'm not 100% sure.

Changed lines 21-22
  >        register int cnt, oldp;
  >        oldp = curwp->w_dotp;
To
  >        register int cnt;
  >        LINE *oldp = curwp->w_dotp;

Changed line 32
  >        if (oldp == (int) (curwp->w_dotp && curwp->w_doto)) {
To
  >        if (oldp == curwp->w_dotp && curwp->w_doto) {
________________________________________________________________________________
